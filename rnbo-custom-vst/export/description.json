{
  "parameters": [
    {
      "type": "ParameterTypeNumber",
      "index": 0,
      "name": "cutoff",
      "paramId": "cutoff",
      "minimum": 100,
      "maximum": 8000,
      "exponent": 2,
      "steps": 0,
      "initialValue": 880,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_08_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 1,
      "name": "overblow",
      "paramId": "overblow",
      "minimum": 0.1,
      "maximum": 5,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1.5,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_09_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 2,
      "name": "Q",
      "paramId": "Q",
      "minimum": 0.01,
      "maximum": 10,
      "exponent": 1,
      "steps": 0,
      "initialValue": 3,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_10_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 3,
      "name": "harmonics",
      "paramId": "harmonics",
      "minimum": 0.1,
      "maximum": 10,
      "exponent": 1,
      "steps": 0,
      "initialValue": 3,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s05",
      "constrainFunc": "param_11_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 4,
      "name": "cutoff",
      "paramId": "poly/cutoff",
      "minimum": 100,
      "maximum": 8000,
      "exponent": 2,
      "steps": 0,
      "initialValue": 880,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_04_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 5,
      "name": "overblow",
      "paramId": "poly/overblow",
      "minimum": 0.1,
      "maximum": 5,
      "exponent": 1,
      "steps": 0,
      "initialValue": 1.5,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_05_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 6,
      "name": "Q",
      "paramId": "poly/Q",
      "minimum": 0.01,
      "maximum": 10,
      "exponent": 1,
      "steps": 0,
      "initialValue": 3,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_06_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 7,
      "name": "harmonics",
      "paramId": "poly/harmonics",
      "minimum": 0.1,
      "maximum": 10,
      "exponent": 1,
      "steps": 0,
      "initialValue": 3,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": 0,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": false,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s04",
      "constrainFunc": "param_07_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 8,
      "name": "left_delay",
      "paramId": "poly/delay/left_delay",
      "minimum": 10,
      "maximum": 10000,
      "exponent": 1,
      "steps": 0,
      "initialValue": 300,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s01",
      "constrainFunc": "param_01_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 9,
      "name": "fb",
      "paramId": "poly/delay/fb",
      "minimum": 0,
      "maximum": 1,
      "exponent": 1,
      "steps": 0,
      "initialValue": 0.25,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s02",
      "constrainFunc": "param_02_value_constrain"
    },
    {
      "type": "ParameterTypeNumber",
      "index": 10,
      "name": "right_delay",
      "paramId": "poly/delay/right_delay",
      "minimum": 10,
      "maximum": 10000,
      "exponent": 1,
      "steps": 0,
      "initialValue": 400,
      "isEnum": false,
      "enumValues": [],
      "displayName": "",
      "unit": "",
      "order": 0,
      "sendinit": true,
      "initialized": true,
      "debug": false,
      "saveable": true,
      "transmittable": true,
      "visible": true,
      "signalIndex": null,
      "ioType": "IOTypeUndefined",
      "serialId": "param_s03",
      "constrainFunc": "param_03_value_constrain"
    }
  ],
  "numParameters": 11,
  "numSignalInParameters": 0,
  "numSignalOutParameters": 0,
  "numInputChannels": 0,
  "numOutputChannels": 2,
  "numMidiInputPorts": 1,
  "numMidiOutputPorts": 0,
  "externalDataRefs": [],
  "patcherSerial": 0,
  "inports": [],
  "outports": [
    {
      "tag": "active",
      "meta": ""
    }
  ],
  "inlets": [
    {
      "type": "midi"
    }
  ],
  "outlets": [
    {
      "type": "signal",
      "index": 1,
      "tag": "out1",
      "meta": ""
    },
    {
      "type": "signal",
      "index": 2,
      "tag": "out2",
      "meta": ""
    }
  ],
  "paramConversion": {
    "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
    "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 100 ? 100 : (value > 8000 ? 8000 : value));\n            let normalizedValue = (value - 100) / (8000 - 100);\n\n            {\n                normalizedValue = rnbo_exp(rnbo_log(normalizedValue) * 1. / 2);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0.1 ? 0.1 : (value > 5 ? 5 : value));\n            let normalizedValue = (value - 0.1) / (5 - 0.1);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 0.1 ? 0.1 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0.1) / (10 - 0.1);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0.01 ? 0.01 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0.01) / (10 - 0.01);\n            return normalizedValue;\n        }\n    default:\n        index -= 4;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertToNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
    "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 100 + rnbo_exp(rnbo_log(value) * 2) * (8000 - 100);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0.1 + value * (5 - 0.1);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0.1 + value * (10 - 0.1);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0.01 + value * (10 - 0.01);\n            }\n        }\n    default:\n        index -= 4;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].convertFromNormalizedParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
    "getNumParameters": "function getNumParameters() {\n    return 4 + this.poly[0].getNumParameters();\n}",
    "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 8000 ? 8000 : (v < 100 ? 100 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 5 ? 5 : (v < 0.1 ? 0.1 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 10 ? 10 : (v < 0.01 ? 0.01 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 10 ? 10 : (v < 0.1 ? 0.1 : v));\n            return v;\n        }\n    default:\n        index -= 4;\n\n        if (index < this.poly[0].getNumParameters()) {\n            {\n                return this.poly[0].constrainParameterValue(index, value);\n            }\n        }\n\n        return value;\n    }\n}",
    "subpatches": {
      "poly": {
        "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
        "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 0:\n        {\n            value = (value < 100 ? 100 : (value > 8000 ? 8000 : value));\n            let normalizedValue = (value - 100) / (8000 - 100);\n\n            {\n                normalizedValue = rnbo_exp(rnbo_log(normalizedValue) * 1. / 2);\n            }\n\n            return normalizedValue;\n        }\n    case 1:\n        {\n            value = (value < 0.1 ? 0.1 : (value > 5 ? 5 : value));\n            let normalizedValue = (value - 0.1) / (5 - 0.1);\n            return normalizedValue;\n        }\n    case 3:\n        {\n            value = (value < 0.1 ? 0.1 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0.1) / (10 - 0.1);\n            return normalizedValue;\n        }\n    case 2:\n        {\n            value = (value < 0.01 ? 0.01 : (value > 10 ? 10 : value));\n            let normalizedValue = (value - 0.01) / (10 - 0.01);\n            return normalizedValue;\n        }\n    default:\n        index -= 4;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertToNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertToNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
        "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 0:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 100 + rnbo_exp(rnbo_log(value) * 2) * (8000 - 100);\n            }\n        }\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0.1 + value * (5 - 0.1);\n            }\n        }\n    case 3:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0.1 + value * (10 - 0.1);\n            }\n        }\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0.01 + value * (10 - 0.01);\n            }\n        }\n    default:\n        index -= 4;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.convertFromNormalizedParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.convertFromNormalizedParameterValue(index, value);\n\n        return value;\n    }\n}",
        "getNumParameters": "function getNumParameters() {\n    return 4 + this.p_01.getNumParameters() + this.p_02.getNumParameters() + this.p_03.getNumParameters();\n}",
        "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 8000 ? 8000 : (v < 100 ? 100 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 5 ? 5 : (v < 0.1 ? 0.1 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 10 ? 10 : (v < 0.01 ? 0.01 : v));\n            return v;\n        }\n    case 3:\n        {\n            v = (v > 10 ? 10 : (v < 0.1 ? 0.1 : v));\n            return v;\n        }\n    default:\n        index -= 4;\n\n        if (index < this.p_01.getNumParameters())\n            return this.p_01.constrainParameterValue(index, value);\n\n        index -= this.p_01.getNumParameters();\n\n        if (index < this.p_02.getNumParameters())\n            return this.p_02.constrainParameterValue(index, value);\n\n        index -= this.p_02.getNumParameters();\n\n        if (index < this.p_03.getNumParameters())\n            return this.p_03.constrainParameterValue(index, value);\n\n        return value;\n    }\n}",
        "subpatches": {
          "p_01": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          },
          "p_02": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 0;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          },
          "p_03": {
            "applyStepsToNormalizedParameterValue": "function applyStepsToNormalizedParameterValue(normalizedValue, steps) {\n    if (steps == 1) {\n        if (normalizedValue > 0) {\n            normalizedValue = 1.;\n        }\n    } else {\n        let oneStep = 1. / (steps - 1);\n        let numberOfSteps = rnbo_fround(normalizedValue / oneStep * 1 / 1) * 1;\n        normalizedValue = numberOfSteps * oneStep;\n    }\n\n    return normalizedValue;\n}",
            "convertToNormalizedParameterValue": "function convertToNormalizedParameterValue(index, value) {\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n            let normalizedValue = (value - 0) / (1 - 0);\n            return normalizedValue;\n        }\n    case 0:\n    case 2:\n        {\n            value = (value < 10 ? 10 : (value > 10000 ? 10000 : value));\n            let normalizedValue = (value - 10) / (10000 - 10);\n            return normalizedValue;\n        }\n    default:\n        return value;\n    }\n}",
            "convertFromNormalizedParameterValue": "function convertFromNormalizedParameterValue(index, value) {\n    value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n    switch (index) {\n    case 1:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 0 + value * (1 - 0);\n            }\n        }\n    case 0:\n    case 2:\n        {\n            value = (value < 0 ? 0 : (value > 1 ? 1 : value));\n\n            {\n                return 10 + value * (10000 - 10);\n            }\n        }\n    default:\n        return value;\n    }\n}",
            "getNumParameters": "function getNumParameters() {\n    return 3;\n}",
            "constrainParameterValue": "function constrainParameterValue(index, value) {\n    var v = value;\n\n    switch (index) {\n    case 0:\n        {\n            v = (v > 10000 ? 10000 : (v < 10 ? 10 : v));\n            return v;\n        }\n    case 1:\n        {\n            v = (v > 1 ? 1 : (v < 0 ? 0 : v));\n            return v;\n        }\n    case 2:\n        {\n            v = (v > 10000 ? 10000 : (v < 10 ? 10 : v));\n            return v;\n        }\n    default:\n        return value;\n    }\n}",
            "subpatches": {},
            "isPolyphonic": false
          }
        },
        "isPolyphonic": true
      }
    },
    "isPolyphonic": false
  },
  "presetid": "rnbo",
  "meta": {
    "architecture": "x64",
    "filename": "blob-synth.maxpat",
    "maxversion": "8.5.1",
    "rnboversion": "1.0.1"
  }
}